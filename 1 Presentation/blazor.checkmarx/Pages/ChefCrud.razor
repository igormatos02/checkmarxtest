@page "/ChefCrud"
@using application.checkmarx.Commands.AddOrder
@using application.checkmarx
@using application.checkmarx.Queries
@using application.checkmarx.DisplayModels;
@using services.checkmarxs
@using crosscutting.checkmarx.Enums
@inject ICommandHandler<AddChefCommand> addCommandHandler
@inject IQueryHandler<GetChefsQuery>  getChefsQuery
<h1>Create Order Screen</h1>

<button class="btn btn-primary"  @onclick="NewChef">Clean Data</button>
<button class="btn btn-primary" @onclick="SaveChef">Add Chef</button>

  @if (chefs != null)
                        { <table class="table">
                        <tr>
                            <td><b>Id</b></td>
                            <td><b>Name</b></td>
                        </tr>
                            @foreach (var d in chefs)
                            {
                                var order = (ChefDisplay)d;
                                <tr>
                                    <td>@order.Id.ToString()</td>
                                   
                                    <td>@order.Name</td>
                                    
                                </tr>
                            }
                        </table>
                        }

<hr>
<table >
     
            <tr>
                <td>Chef Id</td>
                <td>
                    <input  class="form-control"  @bind="currentChef.ChefId" />
                </td>
            </tr>
    
            <tr>
                <td>Chef Name</td>
                <td>
                    <input  class="form-control"  @bind="currentChef.Name" />
                </td>
            </tr>
</table>
<hr>

<div class="badge bg-warning text-dark">@currentChef.Validation</div>
<ul id="receivedList" style="background-color:red; color:white"></ul>           
@code {

   
    private IList<IResult> chefs;
    private AddChefCommand currentChef;
    
    protected override async Task OnInitializedAsync()
    {
        chefs = await getChefsQuery.Handle(new GetChefsQuery());
        NewChef();
    }

 
    private void NewChef()
    {
        currentChef = new AddChefCommand()
        {
           Name = "",
           ChefId = 0
        };

       
    }

    private void SaveChef()
    {
        
        var saveResult = addCommandHandler.Handle(currentChef);

        if (saveResult.Status == TaskStatus.Faulted)
        {
             currentChef.Validation = saveResult.Exception.Message;
        }
        else { 

            chefs.Add(new ChefDisplay() {
                Id = currentChef.ChefId,
                Name = currentChef.Name
            });
            NewChef();
         }
    }
}
