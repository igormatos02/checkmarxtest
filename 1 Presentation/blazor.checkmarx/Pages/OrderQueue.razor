@page "/OrderQueue"
@using application.checkmarx.Commands
@using application.checkmarx
@using application.checkmarx.Queries
@using application.checkmarx.DisplayModels;
@using services.checkmarxs
@using crosscutting.checkmarx.Enums
@inject ICommandHandler<ChangeOrderStatusCommand> changeOrderStatusHandler
@inject IQueryHandler<GetDishesQuery> getDishesQuery
@inject IQueryHandler<GetChefsQuery>  getChefsQuery
@inject IQueryHandler<GetWaitersQuery>  getWaitersQuery
@inject IQueryHandler<GetOrderQueueQuery> getOrderQuery
@inject IRabbitMQService RabbitMQService
<h1>Order Queue Screen</h1>
<button @onclick="() => Refresh()">Refresh</button>
<table>
    <tr>
        <td>Select a Chef </td>
        <td> <select class="form-control"  @bind="chefId">
                @if (chefs != null) {
                    @foreach (var d in chefs)
                    {   
                        var chef = (ChefDisplay)d;
                        <option value="@chef.Id">@chef.Name</option>
                    }
                }
            </select>
            </td>
    </tr>
</table>
<hr />
@if (chefId != 0) { 
<table width="100%">
    <tr>
        <td>
            <table>
                <tr>
                    <td width="600px">
                        @if (orders != null)
                        { <table class="table">
                        <tr>
                            <td>Table Number</td>
                            <td>Date</td>
                             <td>Status</td>
                        </tr>
                            @foreach (var d in orders)
                            {
                                var order = (OrderDisplay)d;
                                <tr>
                                    <td>@order.TableNumber.ToString()</td>
                                    <td>@order.CreationDate.ToString("dd/MM/yyyy HH:mm")</td>
                                    <td>@order.Status.ToString()</td>
                                    <td>
                                        @if (order.Status==OrderStatus.SentToKitchen) { 
                                        <button  class="btn btn-primary" @onclick="()=>PrepareOrder(order)">Prepare</button>
                                        }
                                    </td>
                                </tr>
                            }
                        </table>
                        }
                    </td>
                </tr>
            </table>
        </td>
        <td style="width:30px"></td>
        <td>
        @if (currentOrder != null)
        {
            TimeSpan preparationTime = new TimeSpan(0);

            <table class="table table-striped" width="600px">
                 <tr>
                    <td>Id</td>
                    <td>Description</td>
                    <td>Price</td>
                    <td>Preparation Time</td>
                </tr>
            @foreach (var d in currentOrder.Dishes)
            {
                var dish = @dishes.Select(x => (DishDisplay)x).Where(x => x.Id == d).FirstOrDefault();
                if (dish.PreparationTime > preparationTime)
                    preparationTime = dish.PreparationTime;
                <tr>
                    <td>@d</td>
                    <td>@dish.Description</td>
                    <td>@dish.Price</td>
                    <td>@dish.PreparationTime.ToString()</td>
                </tr>
            }
            </table>
             <table>
                <tr>
                    <td>Time to Prepare:</td>
                    <td>@preparationTime</td>
                </tr>
                 <tr>
                     @{
                         var chief = chefs.Select(x => ((ChefDisplay)x)).Where(x => x.Id == currentOrder.ChefId).FirstOrDefault();
                     }
                     @if (chief != null) { 
                    <td>Chef:</td>
                    <td>@chief.Name</td>
                    }
                </tr>
                 <tr>
                     @{
                         var waiter = waiters.Select(x => ((WaiterDisplay)x)).Where(x => x.Id == currentOrder.WaiterId).FirstOrDefault();
                     }
                     @if (waiter != null) { 
                    <td>Waiter:</td>
                    <td>@waiter.Name</td>
                    }
                </tr>
            </table>
            <button class="btn btn-primary" @onclick="()=>DeliverOrder()">Deliver Order</button>
            }
        </td>
    </tr>
</table>
}
<div class="badge bg-warning text-dark">@validation</div>
<ul id="orderList" style="background-color:red; color:white"></ul>                   


@code {

    private IList<IResult> orders;
    private IList<IResult> chefs;
    private IList<IResult> waiters;
    private IList<IResult> dishes;
    private OrderDisplay currentOrder;
    private string validation;
    private int chefId = 0;
    protected override async Task OnInitializedAsync()
    {
        Refresh();
      
        dishes = await getDishesQuery.Handle(new GetDishesQuery());
        waiters = await getWaitersQuery.Handle(new GetWaitersQuery());
       
    }

    private void PrepareOrder(OrderDisplay order)
    {

        var saveResult = changeOrderStatusHandler.Handle(new ChangeOrderStatusCommand()
        {
            OrderId = order.OrderId,
            Status = OrderStatus.Preparing,
            ChefId = chefId
        });
        if (saveResult.Status == TaskStatus.Faulted)
        {
            validation = saveResult.Exception.Message;
        }
        else
        {
            order.Status = OrderStatus.Preparing;
            currentOrder = order;
            validation = string.Empty;
        }
    }

    private void DeliverOrder()
    {
        currentOrder.Status = OrderStatus.ReadyToDeliver;
        changeOrderStatusHandler.Handle(new ChangeOrderStatusCommand()
        {
            OrderId = currentOrder.OrderId,
            Status = currentOrder.Status,
            ChefId = chefId
        });
        currentOrder = null;
    }

    public async Task Refresh()
    {
          chefs = await getChefsQuery.Handle(new GetChefsQuery());
        if (chefId != 0)
        {
            orders = await getOrderQuery.Handle(new GetOrderQueueQuery() { Status = OrderStatus.SentToKitchen });
            var preparingOrders = await getOrderQuery.Handle(new GetOrderQueueQuery() { Status = OrderStatus.Preparing });
            var currentOrder = preparingOrders.Select(x => ((OrderDisplay)x)).Where(x => x.ChefId == chefId && OrderStatus.Preparing == x.Status).FirstOrDefault();
            StateHasChanged();
        }
    }

}
