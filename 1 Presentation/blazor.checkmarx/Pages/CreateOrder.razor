@page "/CreateOrder"
@using application.checkmarx.Commands.AddOrder
@using application.checkmarx
@using application.checkmarx.Queries
@using application.checkmarx.DisplayModels;
@using services.checkmarxs
@inject ICommandHandler<AddOrderCommand> addCommandHandler
@inject IQueryHandler<GetDishesQuery> getDishesQuery
@inject IQueryHandler<GetChefsQuery>  getChefsQuery
@inject IQueryHandler<GetWaitersQuery>  getWaitersQuery
@inject IRabbitMQService RabbitMQService
<h1>Counter</h1>

<p>Current count: @currentCount</p>

<button class="btn btn-primary"  @onclick="NewOrder">Clean Order</button>
<button class="btn btn-primary" @onclick="SaveOrder">Save Order</button>

<table>
     <tr>
        <td>Waiter</td>
        <td> <select>
                @if (waiters != null) {
                    @foreach (var d in waiters)
                    {   
                        var waiter = (WaiterDisplay)d;
                        <option value="@waiter.Id">@waiter.Name</option>
                    }
                }
            </select>
         </td>
    </tr>
    <tr>
        <td>Table Number</td>
        <td>
            <select>
                <option>1</option>
                <option>2</option>
                <option>3</option>
                <option>4</option>
                <option>5</option>
            </select>
        </td>
    </tr>
     <tr>
         <td> @if (dishes!= null) { 
                    @foreach(var d in dishes) {
                        var dish = (DishDisplay)d;
                                  
                    <button @onclick="()=>AddDish(dish)">Add @dish.Description</button>
                    }
                }</td>
    </tr>
    <tr>
        <td>
            <table class="table table-striped" width="600px">
                 <tr>
                    <td>Id</td>
                    <td>Description</td>
                    <td>Price</td>
                    <td>Preparation Time</td>
                </tr>
            @foreach (var d in currentOrder.Dishes)
            {
                var dish = @dishes.Select(x => (DishDisplay)x).Where(x => x.Id == d).FirstOrDefault();
                <tr>
                    <td>@d</td>
                    <td>@dish.Description</td>
                    <td>@dish.Price</td>
                    <td>@dish.PreparationTime.ToString()</td>
                </tr>
            }
            </table>
        </td>
    </tr>
</table>


@code {
    private int currentCount = 0;
    private IList<IResult> dishes;
    private IList<IResult> waiters;
    private AddOrderCommand currentOrder;
    protected override async Task OnInitializedAsync()
    {
        dishes = getDishesQuery.Handle(new GetDishesQuery());
        waiters = getWaitersQuery.Handle(new GetWaitersQuery());
        NewOrder();
    }

    private void AddDish(DishDisplay d)
    {
        currentOrder.Dishes.Add(d.Id);
    }

    private void NewOrder()
    {
        currentOrder = new AddOrderCommand();
    }

    private void SaveOrder()
    {
        addCommandHandler.Handle(currentOrder);
       //RabbitMQService.Connect();
 
    }
}
